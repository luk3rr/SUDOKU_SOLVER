#!/usr/bin/env python3

# Filename: plot.py
# Created on: May  2, 2024
# Author: Lucas Ara√∫jo <araujolucas@dcc.ufmg.br>
#
# This script plots the results of the benchmarking of the sudoku solver
#
# Usage: python3 plot.py
#
# NOTE: This script assumes that the benchmarking data is in the data/ directory
#       and that the data was generated by the benchmark.sh script. Run the
#       benchmark.sh script before running this script.

import os
import matplotlib.pyplot as plt

ROOT_DIR = os.path.normpath(
    os.path.join(os.path.abspath(__file__), os.pardir, os.pardir, os.pardir)
)
TEST_DIR = os.path.join(ROOT_DIR, "test")
BENCHMARK_DIR = os.path.join(TEST_DIR, "benchmarks")
IMG_DIR = os.path.join(BENCHMARK_DIR, "img")
DATA_DIR = os.path.join(BENCHMARK_DIR, "data")
FILE_EXTENSION = ".dat"


def read_data(filename, column):
    """
    @brief Read data from a file and return it as a list of lists
    @param filename The name of the file to be read
    @param column The column to be read from the file
    @return A list of lists containing the data read from the file
    """
    data = []
    with open(filename, "r") as file:
        lines = file.readlines()
        data = [[float(line.split()[column]) for line in lines]]

    return data


def plot_avg_comparison(folder, algorithms, data, comparison_type):
    plt.figure(figsize=(10, 6))

    # Compute the average of the data
    avg_times = [sum([entry[0] for entry in times]) / len(times) for times in data]

    # Show the sample size
    bars = plt.bar(algorithms, avg_times, label=f"Sample size: {len(data[0][0])})")

    # Add labels to each bar's height
    for _, bar in enumerate(bars):
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            bar.get_height(),
            int(bar.get_height()),
            ha="center",
            va="bottom",
        )

    plt.xlabel("Algorithm")
    plt.ylabel("Average Time (ms)")
    plt.title(f"Comparison of Average {comparison_type} - {folder} level Sudoku")
    plt.legend()

    # Set the y-axis limit to 10% above the maximum value
    # to bars don't touch the top of the plot
    max_height = max(avg_times)
    plt.ylim(0, max_height * 1.1)

    plt.tight_layout()

    if not os.path.exists(IMG_DIR):
        os.makedirs(IMG_DIR)

    modified_comparison_type = comparison_type.replace(" ", "_").lower()
    img_name = f"{IMG_DIR}/{folder}_{modified_comparison_type}_comparison.png"

    plt.savefig(img_name)

    print(f"Plot saved as {img_name}")


def time_comparison():
    """
    @brief Compare the execution time of the algorithms

    """
    if not os.path.exists(DATA_DIR):
        print("No data directory found. Run the benchmark.sh first.")
        return

    folders = [
        folder
        for folder in os.listdir(DATA_DIR)
        if os.path.isdir(os.path.join(DATA_DIR, folder))
    ]

    for folder in folders:
        algorithms = []
        data = []

        files = [
            file
            for file in os.listdir(os.path.join(DATA_DIR, folder))
            if file.endswith(FILE_EXTENSION)
        ]

        for file in files:
            algorithms.append(
                file.split("_")[0]
            )  # Extract the algorithm name from the file name

            # 1 is the column of the execution time in the data file
            times = read_data(os.path.join(DATA_DIR, folder, file), 1)
            data.append(times)

        if data:
            plot_avg_comparison(folder, algorithms, data, "Execution Time")

        else:
            print(
                f"No data files found in folder {folder}. Run the benchmark.sh first."
            )


def expanded_states_comparison():
    """
    @brief Compare the number of expanded states of the algorithms

    """

    if not os.path.exists(DATA_DIR):
        print("No data directory found. Run the benchmark.sh first.")
        return

    folders = [
        folder
        for folder in os.listdir(DATA_DIR)
        if os.path.isdir(os.path.join(DATA_DIR, folder))
    ]

    for folder in folders:
        algorithms = []
        data = []

        files = [
            file
            for file in os.listdir(os.path.join(DATA_DIR, folder))
            if file.endswith(FILE_EXTENSION)
        ]

        for file in files:
            algorithms.append(
                file.split("_")[0]
            )  # Extract the algorithm name from the file name

            # 2 is the column of the expanded states in the data file
            expanded_states = read_data(os.path.join(DATA_DIR, folder, file), 2)
            data.append(expanded_states)

        if data:
            plot_avg_comparison(folder, algorithms, data, "Expanded States")

        else:
            print(
                f"No data files found in folder {folder}. Run the benchmark.sh first."
            )


def main():
    time_comparison()
    expanded_states_comparison()


if __name__ == "__main__":
    main()
